global:
  # second level domain only! / core domain (example: simulator.loc)
  domain: "simulator.loc"
  imageRegistry: hub.corezoid.com
  repotype: "public"
  env: prod
  # repotype: "public/gitcall"
  imagePullPolicy: IfNotPresent
  # imagePullSecrets:
  #   name: corezoid-secret
  imageInit:
    repository: hub.corezoid.com/hub.docker.com/library/alpine
    pullPolicy: IfNotPresent
    tag: "3.21"
  alpineImage:
    registry: hub.corezoid.com
    repository: hub.docker.com/library/alpine
    tag: "3.21"
  serviceMonitor:
    enabled: true
  dashboards:
    # -- If enabled, Grafana dashboards are deployed
    enabled: false
    # -- Annotations to add to the Grafana dashboard ConfigMap
    # Note: If using with middleware observability platform, annotation should be provided to place dashboards in proper folder.
    # From observability chart, value from grafana.sidecar.dashboards.folderAnnotation is a
    # "key" for annotation, and value is a name of folder which will be created in Grafana UI for Gitcall dashboards.
    annotations: { }
    # -- Labels to add to the Grafana dashboard ConfigMap
    # Note: If using with middleware observability platform, labels should be provided to discovery
    # dashboards and upload them to grafana. From observability chart, value from grafana.sidecar.dashboards.label is a key,
    # and grafana.sidecar.dashboards.labelValue is a value for that label.
    # So, label should looks like grafana.sidecar.dashboards.label:grafana.sidecar.dashboards.labelValue
    labels: { }
  deploymentStrategy:
    type: RollingUpdate
  networkPolicy:
    enabled: false
  # Ingress annotations
  ingress:
    className: internal-nginx
    annotations:
      ingress.class: internal-nginx
  db:
    image: "postgres:16-alpine"
    # if internal true - create and use internal postgres container
    # if internal false - enable external db, like aws rds
    internal: false
    ## secret configuration for postgresql

    ## pvc name
    persistantVolumeClaimName: "postgresql-pvc" # If internal: true, then uncomment this line
    secret:
      ## true - secret will be created automaticaly with provided values
      ## false - secret should be created manualy
      create: true
      ## secret name
      name: "postgresql-secret"
      ## for init db and roles dbsuperuser and dbuser cannot be changed (because used as plain text in sql)
      dbsuperuser: "dbsuperuser"
      ## password - for dbsuperuser
      dbsuperuserpwd: "dbsuperuserpwd"
      data:
        dbhost: "DBHOST"
        # dbhost: "pg-postgresql"   # If internal: true, then this host
        dbport: "5432"
        dbuser: "dbuser"
        dbpwd: "dbpwd"
        dbuser_fdw: "fdw_user"
        dbpwd_fdw: "fdw_user_passwd"

  #######  RabbitMQ  ########
  ## Supported version  3.9.*
  mq:
    # if internal true - create and use internal rmq container
    # if internal false - enable external rmq (on aws ec2 instances as example)
    internal: false
    ## secret configuration for rabbitmq
    secret:
      ## true - secret will be created automatically with provided values
      ## false - secret should be created manually
      create: true
      name: "rabbitmq-secret"
      data:
        # host: "rabbit-service"  # If internal: true, then this host
        host: "RMQHOST"  # If internal: false, then this host
        port: "5672"
        vhost: "/conveyor"
        username: "rabbituser"
        password: "rabbitpassword"
    # vm_memory_high_watermark.relative
    memoryHighWatermark: 0.3

  gitcall:
    # true or false
    enabled: true
    log_level: info
    prometheusPort: 8060
    # tag: ""
    resources: {}
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 80
    registry:
      ## @param gitcall.registry.useDomain Set use domain for registry or not
      ## Set false to use registry-service.{{ .Release.Namespace }}.svc.cluster.local to get image registry
      useDomain: false
      # If use specific domain for GitCall registry set `host` parameter
      # host: "gitcall.reiestry.loc"
      # else set `subDomain` parameter, will be subDomain.domain
      subDomain: "gitcall"
      tls: false
      storage:
        provider: s3
        # filesystem:
        #   size: 10Gi
        #   storageClass: "-"
        #   accessMode: ReadWriteOnce
        # s3:
        #   region: eu-central-1
        #   regionEndpoint: ""
        #   bucket: ChangeMe
        #   rootDirectory: ""
        #   accessKey: ChangeMe
        #   secretKey: ChangeMe
    secret: "sEcRet"
    mq_vhost: "/gitcall"
    dunder_mq_vhost: "/dundergitcall"
    db_name: "gitcall"
    docker:
      replicaCount: 2
    valkey:
      # resources: {}
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 50m
          memory: 100Mi
    networkPolicy:
      enabled: true
      egress:
        # Allow communication to Kubernetes DNS service
        - to:
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: kube-system
            - podSelector:
                matchLabels:
                  k8s-app: kube-dns
          ports:
            - protocol: UDP
              port: 53
        # Allow internet access
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
                # Exclude traffic to Kubernetes service IPs and pods
                except:
                  - 10.0.0.0/8
                  - 172.16.0.0/12
                  - 192.168.0.0/16
                  - 169.254.169.254/32
    ## Affinity for all applications in gitcall
    affinity: {}
    ## Tolerations for all applications in gitcall
    tolerations:
  valkey:
    use: true
    internal: true
    secret:
      name: "valkey"
      create: true
      data:
        host: "gitcall-valkey-service"
        port: "6379"
        password: "Password"
    ## Affinity for Valkey application in gitcall
    affinity: {}
    ## Tolerations for Valkey application in gitcall
    tolerations: []
registry:
  storage:
    provider: "filesystem"  # can be "filesystem" or "s3"
    # filesystem:
    #   size: "10Gi"
    #   storageClass: "gp2"
    # s3:
    #   region: "eu-central-1"
    #   regionEndpoint: ""
    #   bucket: ""
    #   rootDirectory: ""
    #   accessKey: ""
    #   secretKey: ""
